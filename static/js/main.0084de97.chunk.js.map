{"version":3,"sources":["apiKeys.js","images/WeatherIcons.gif","forcast.js","currentLocation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","key","base","Forcast","props","useState","query","setQuery","error","setError","weather","setWeather","search","city","axios","get","apiKeys","then","response","data","catch","console","log","message","defaults","useEffect","className","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","onClick","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","Weather","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getWeather","a","fetch","api_call","json","setState","latitude","longitude","err","alert","this","timerID","setInterval","clearInterval","Fragment","id","format","interval","ticking","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","loader","alt","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mFACAA,EAAOC,QAAU,CACfC,IAAK,mCACLC,KAAM,6C,mBCHRH,EAAOC,QAAU,IAA0B,0C,mSCyH5BG,MApHf,SAAiBC,GAAQ,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,OAEIF,mBAAS,IAFb,mBAEfG,EAFe,KAERC,EAFQ,OAGQJ,mBAAS,IAHjB,mBAGfK,EAHe,KAGNC,EAHM,KAKhBC,EAAS,SAACC,GACdC,IACGC,IADH,UAEOC,IAAQd,KAFf,qBAGc,mBAARW,EAA4BA,EAAOP,EAHzC,+BAI2BU,IAAQf,MAEhCgB,MAAK,SAACC,GACLP,EAAWO,EAASC,MACpBZ,EAAS,OAEVa,OAAM,SAAUZ,GACfa,QAAQC,IAAId,GACZG,EAAW,IACXJ,EAAS,IACTE,EAAS,CAAEc,QAAS,YAAajB,MAAOA,QAUxCkB,EACG,QADHA,EAEE,IAFFA,GAGK,EAOX,OAJAC,qBAAU,WACRb,EAAO,WACN,IAGD,yBAAKc,UAAU,YACb,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CACEC,KAAMvB,EAAMuB,KACZC,MAAOJ,EACPK,KAAML,EACNM,QAASN,KAGb,yBAAKE,UAAU,iBACb,4BAAKtB,EAAMM,SACX,yBAAKgB,UAAU,cACb,2BACEK,KAAK,OACLL,UAAU,aACVM,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAO3B,EAAS2B,EAAEC,OAAOC,QACnCA,MAAO9B,IAET,yBAAKoB,UAAU,WACZ,IACD,yBACEW,IAAI,8DACJC,QAAS1B,MAIf,4BAC0B,oBAAhBF,EAAQ6B,KACd,6BACG,IACD,wBAAIb,UAAU,YACZ,2BACGhB,EAAQ8B,KADX,KACmB9B,EAAQ+B,IAAIC,SAE/B,yBACEhB,UAAU,OACVW,IAAG,4CAAuC3B,EAAQA,QAAQ,GAAGiB,KAA1D,WAGP,0CACc,IACZ,0BAAMD,UAAU,QACbiB,KAAKC,MAAMlC,EAAQ6B,KAAKM,MAD3B,UACsCnC,EAAQA,QAAQ,GAAG6B,KADzD,MAIF,uCACW,IACT,0BAAMb,UAAU,QACbiB,KAAKC,MAAMlC,EAAQ6B,KAAKO,UAD3B,MAIF,yCACa,IACX,0BAAMpB,UAAU,QACbiB,KAAKC,MAAMlC,EAAQqC,YADtB,QAIF,yCACa,IACX,0BAAMrB,UAAU,QACbiB,KAAKC,MAAMlC,EAAQsC,KAAKC,OAD3B,WAMJ,4BACGzC,EAAMF,MADT,IACiBE,EAAMe,a,iBCzF7BC,EACG,QADHA,EAEE,IAFFA,GAGK,EAqJI0B,E,4MAjJbC,MAAQ,CACNC,SAAKC,EACLC,SAAKD,EACLE,kBAAcF,EACdG,kBAAcH,EACdI,kBAAcJ,EACdxC,UAAMwC,EACNX,aAASW,EACTP,cAAUO,EACVK,iBAAaL,EACb1B,KAAM,YACNgC,aAASN,EACTO,YAAQP,EACRQ,cAAUR,G,EA2BZS,W,uCAAa,WAAOV,EAAKE,GAAZ,iBAAAS,EAAA,sEACYC,MAAM,GAAD,OACvBhD,IAAQd,KADe,uBACIkD,EADJ,gBACeE,EADf,+BACyCtC,IAAQf,MAFlE,cACLgE,EADK,gBAIQA,EAASC,OAJjB,OAIL/C,EAJK,OAKX,EAAKgD,SAAS,CACZf,IAAKA,EACLE,IAAKA,EACLzC,KAAMM,EAAKqB,KACXgB,aAAcb,KAAKC,MAAMzB,EAAKoB,KAAKM,MACnCY,aAAcd,KAAKC,MAAuB,IAAjBzB,EAAKoB,KAAKM,KAAa,IAChDC,SAAU3B,EAAKoB,KAAKO,SACpBP,KAAMpB,EAAKT,QAAQ,GAAG6B,KACtBG,QAASvB,EAAKsB,IAAIC,UAbT,KAeH,EAAKS,MAAMZ,KAfR,OAgBJ,SAhBI,QAmBJ,WAnBI,QAsBJ,SAtBI,QAyBJ,SAzBI,QA4BJ,SA5BI,QA+BJ,YA/BI,QAkCJ,QAlCI,QAqCJ,UArCI,QAwCJ,YAxCI,gCAiBP,EAAK4B,SAAS,CAAExC,KAAM,cAjBf,oCAoBP,EAAKwC,SAAS,CAAExC,KAAM,WApBf,oCAuBP,EAAKwC,SAAS,CAAExC,KAAM,SAvBf,oCA0BP,EAAKwC,SAAS,CAAExC,KAAM,SA1Bf,oCA6BP,EAAKwC,SAAS,CAAExC,KAAM,SA7Bf,oCAgCP,EAAKwC,SAAS,CAAExC,KAAM,UAhCf,4CAsCP,EAAKwC,SAAS,CAAExC,KAAM,QAtCf,oCAyCP,EAAKwC,SAAS,CAAExC,KAAM,SAzCf,6BA4CP,EAAKwC,SAAS,CAAExC,KAAM,cA5Cf,4C,0HAxBQ,IAAD,OAElBqC,MAAM,0BACH/C,MAAK,SAACC,GAAD,OAAcA,EAASgD,UAC5BjD,MAAK,SAACE,GACL,EAAK2C,WAAW3C,EAAKiD,SAAUjD,EAAKkD,cAErCjD,OAAM,SAACkD,GACN,EAAKR,WAAW,MAAO,OACvBS,MACE,sGAINC,KAAKC,QAAUC,aACb,kBAAM,EAAKZ,WAAW,EAAKX,MAAMC,IAAK,EAAKD,MAAMG,OACjD,O,6CAKFqB,cAAcH,KAAKC,W,+BAoDnB,OAAID,KAAKrB,MAAMK,aAEX,kBAAC,IAAMoB,SAAP,KACE,yBAAKlD,UAAU,QACb,yBAAKA,UAAU,SACb,4BAAK8C,KAAKrB,MAAMtC,MAChB,4BAAK2D,KAAKrB,MAAMT,UAElB,yBAAKhB,UAAU,WACb,kBAAC,IAAD,CACEC,KAAM6C,KAAKrB,MAAMxB,KACjBC,MAAOJ,EACPK,KAAML,EACNM,QAASN,IAEX,2BAAIgD,KAAKrB,MAAMZ,OAEjB,yBAAKb,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKmD,GAAG,QACR,yBAAKnD,UAAU,gBACb,kBAAC,IAAD,CAAOoD,OAAO,WAAWC,SAAU,IAAMC,SAAS,KAEpD,yBAAKtD,UAAU,gBAxIX,SAACuD,GACnB,IAQMC,EAJO,CACX,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAGnDD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAVS,CACb,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OACxD,SAAU,YAAa,UAAW,WAAY,YAQ3BL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEf,MAAM,GAAN,OAAUP,EAAV,aAAkBE,EAAlB,YAA0BE,EAA1B,YAAmCE,GA0HUE,CAAY,IAAIC,QAEjD,yBAAKjE,UAAU,eACb,2BACG8C,KAAKrB,MAAMK,aADd,OAC4B,uCAKlC,kBAAC,EAAD,CAAS7B,KAAM6C,KAAKrB,MAAMxB,KAAMjB,QAAS8D,KAAKrB,MAAMZ,QAKtD,kBAAC,IAAMqC,SAAP,KACE,yBACEvC,IAAKuD,IACLC,IAAI,aACJC,MAAO,CAAEC,MAAO,MAAOC,eAAgB,UAEzC,wBAAIF,MAAO,CAAElE,MAAO,QAASqE,SAAU,OAAQC,WAAY,QAA3D,2BAGA,wBAAIJ,MAAO,CAAElE,MAAO,QAASuE,UAAW,SAAxC,sDACqD,6BADrD,oD,GAxIYC,a,MCfPC,MAXf,WACE,OACE,kBAAC,IAAMzB,SAAP,KACE,yBAAKlD,UAAU,aACb,kBAAC,EAAD,SCIY4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjG,MAAK,SAAAkG,GACJA,EAAaC,gBAEdhG,OAAM,SAAAZ,GACLa,QAAQb,MAAMA,EAAMe,c","file":"static/js/main.0084de97.chunk.js","sourcesContent":["// Visit https://api.openweathermap.org & then signup to get our API keys for free\nmodule.exports = {\n  key: \"b91714bd41dc6c0a583855521cd7b737\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n","module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","import React, { useState, useEffect, Component } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city != \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n  function checkTime(i) {\n    if (i < 10) {\n      i = \"0\" + i;\n    } // add zero in front of numbers < 10\n    return i;\n  }\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  useEffect(() => {\n    search(\"Delhi\");\n  }, []);\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={search}\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main != \"undefined\" ? (\n            <div>\n              {\" \"}\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}Â°c ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\nexport default Forcast;\n","import React, { Component } from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = (d) => {\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\", \"November\", \"December\",\n  ];\n  const days = [\n    \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\",\n  ];\n\n  const day = days[d.getDay()];\n  const date = d.getDate();\n  const month = months[d.getMonth()];\n  const year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\nclass Weather extends Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    // Get approximate location using IP address\n    fetch(\"https://ipapi.co/json/\")\n      .then((response) => response.json())\n      .then((data) => {\n        this.getWeather(data.latitude, data.longitude);\n      })\n      .catch((err) => {\n        this.getWeather(28.67, 77.22); // Default location if IP-based location fails\n        alert(\n          \"Failed to fetch approximate location. Using default location for calculating Real-time weather.\"\n        );\n      });\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}Â°<span>C</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img\n            src={loader}\n            alt=\"Loading...\"\n            style={{ width: \"50%\", WebkitUserDrag: \"none\" }}\n          />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location will be displayed on the App <br />\n            and used for calculating Real-time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;","import React, { useState } from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n     \n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}